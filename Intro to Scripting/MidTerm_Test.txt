//Tells us which Engine is being used when making the code

using UnityEngine;
using System.Collections;

//establishes the class of the script. It's public, so it can be accessed from other scripts. 
public class MidTerm : MonoBehaviour {
    



//VARIABLES - boxes where we can store values to use in the script.

//public int myInt is establishing a variable whose value is the integer 6. Can be changed in the editor in Unity, because it's public.
    public int myInt = 6;

//float variables can be non-whole numbers, such as 1.3 or 2.7, but have to have an f at the end, to establish that it's a float and not an integer. Example: 3.2f. coffeeTemperature is declaring a variable with a float value of 85.0f.
    float coffeeTemperature = 85.0f;

//hotLimitTemperature - sets the value of the float variable to 70. It's private, so it can't be changed in the editor or referenced in another script. 
    private float hotLimitTemperature = 70.0f;

//coldLimitTemperature - sets the value of this float variable, so if it's referenced later, coldLimitTemperature will have a value of 40. Public, can be changed in Editor and referenced in another script.
    public float coldLimitTemperature = 40.0f;

//int numEnemies - Integer variable, which means that it has to be a whole number. The integer is being named numEnemies, and carries a value of 3.
    int numEnemies = 3;

//private MidTerm myMidterm - Renames the class MidTerm to myMidterm.
    private MidTerm myMidterm;

//GameObject[] is a variable that is calling the array of the GameObject and giving it the name players, for ease of access in coding. For the GameObject tool in Unity, which This variable is public, so it can be changed in the Editor and referenced in other scripts. GameOb
    public GameObject[] players;
    
    void Start ()
    {
        TemperatureTest();
        Debug.Log (myInt);
//FOR LOOPS - A for loop is kind of like a flow chart. It will infinitely repeat itself until 

//for loops 
        for(int i = 0; i < numEnemies; i++)
        {
            Debug.Log("Creating enemy number: " + i);
        }
        myMidterm = GetComponent<MidTerm>();

        for(int i = 0; i < players.Length; i++)
        {
            Debug.Log("Player Number "+i+" is named "+players[i].name);
        }

        Direction myDirection;
        
        myDirection = Direction.North;

        ReverseDirection (myDirection);

    }
    

//VOID UPDATE starts the function Because it's under the Update function, it is called on every frame
    void Update ()
    {

//IF STATEMENT 

//An if statement is a common kind of conditional, where the coder has to set certain parameters that have to be met for the if statement to do anything. In this case, Input.GetKeyDown(KeyCode.Space) means that when the user presses down on the space bar, the function will do something.
        if(Input.GetKeyDown(KeyCode.Space))
            TemperatureTest();
       //coffeeTemperature 
        coffeeTemperature -= Time.deltaTime * 5f;
    }

    void TemperatureTest ()
    {
        string tooHot = "Coffee is too hot.";
        if(coffeeTemperature > hotLimitTemperature)
        {
            print(tooHot);
        }
    }

//ENUMERATOR
    enum Direction{North, East, South, West};
    
    void ReverseDirection (Direction dir)
    {
        if(dir == Direction.North)
            dir = Direction.South;


    }



//SWITCH STATEMENTS - Similar to if statements. 
    void Greet()
    {

//Begins the switch statement called myInt.
        switch (myInt)
        {

//case 5 signifies that this is the 5th case. If you have a variable for levels of intelligence or other parameters, then this one will play when the user fills the parameter. 
        case 5:

//print means to display in the console. The text in quotations will appear if the parameters of case 5 are met. 
            print ("Why hello there good sir! Let me teach you about Trigonometry!");

//break signifies the end of this particular switch statement, and tells the script to go back and try again. 
            break;
        case 4:
            print ("Hello and good day!");
            break;
        case 3:
            print ("Whadya want?");
            break;
        case 2:
            print ("Grog SMASH!");
            break;
        case 1:
            print ("Ulg, glib, Pblblblblb");
            break;
        default:
            print ("Incorrect intelligence level.");
            break;
        }
}

}



Robert, just so you know, I'm not done with this. I'll finish it tomorrow. 